
plugins {
    id 'antlr'
    id 'jacoco'
    id 'java-library'
}

apply plugin: 'antlr'

group 'com.github.iamrenny.ruleflow'
version '0.0.1'

java {
    sourceCompatibility = '17'
}


repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.11"
}

def baseFolder = 'com/iamrenny/ruleflow'
def jacocoExcludedDirs = [
        "$baseFolder/config/**",
        "$baseFolder/vo/**",
        "$baseFolder/errors/**"
]

dependencies {
    antlr "org.antlr:antlr4:$antlr_version"

    implementation "org.antlr:antlr4-runtime:$antlr_version"

    implementation 'ch.qos.logback:logback-classic:1.5.0'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'



    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.3'

    testImplementation "org.mockito:mockito-junit-jupiter:3.12.4"
    testImplementation "org.mockito:mockito-core:3.12.4"
    testImplementation "com.google.code.gson:gson:2.8.9"
}

test {
    environment "ENV", "test"

    useJUnitPlatform()

    // Show test results.
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"

    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = true
    }
    finalizedBy jacocoTestCoverageVerification
}

generateGrammarSource {
    arguments += ["-visitor", "-long-messages"]
}

compileJava.dependsOn(generateGrammarSource)