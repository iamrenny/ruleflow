buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm"
    id 'antlr'
    id 'jacoco'
    id 'java-library'
    id 'maven-publish'
}

apply plugin: "kotlin"
apply plugin: 'antlr'
apply plugin: "maven-publish"

group 'com.rappi'
version '1.0.0'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.allWarningsAsErrors = false
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.allWarningsAsErrors = false
}

jacoco {
    toolVersion = "0.8.5"
}

def baseFolder = 'com/rappi/fraud/rules/parser'
def jacocoExcludedDirs = [
        "$baseFolder/config/**",
        "$baseFolder/vo/**",
        "$baseFolder/errors/**"
]

dependencies {
    antlr "org.antlr:antlr4:$antlr_version"

    implementation "org.antlr:antlr4-runtime:$antlr_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    testCompile "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testCompile "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testCompile "org.mockito:mockito-junit-jupiter:$mockito_version"
    testCompile "org.mockito:mockito-core:$mockito_version"
    testCompile "com.google.code.gson:gson:$gson_version"
    testCompile "com.nhaarman:mockito-kotlin:$mockito_kotlin_version"
}

test {
    environment "ENV", "test"

    useJUnitPlatform()

    // Show test results.
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"

    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludedDirs)
        }))
    }
}

generateGrammarSource {
    arguments += ["-visitor", "-long-messages"]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = 'com.rappi.fraud'
            artifactId = 'analang-sdk'
        }
    }
    repositories {
        maven {
            name "nexus"
            allowInsecureProtocol = true

            def nexusHome = System.getenv("NEXUS_URL_REPOSITORY")

            if (project.version.endsWith("-SNAPSHOT")) {
                url = uri("${nexusHome}/repository/maven2-snapshot-hosted/")
            } else {
                url = uri("${nexusHome}/repository/maven2-hosted/")
            }

            credentials {
                username System.getenv("NEXUS_USERNAME_REPOSITORY")
                password System.getenv("NEXUS_PASSWORD_REPOSITORY")
            }
        }
    }
}

compileKotlin.dependsOn(generateGrammarSource)