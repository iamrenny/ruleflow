buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    id 'jacoco'
}

apply plugin: 'application'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
}

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

group 'com.rappi'
version '1.0'

mainClassName = 'com.rappi.fraud.rules.ApplicationKt'

configurations {
    ktlint
}


jacoco {
    toolVersion = "0.8.5"
}

def baseFolder = 'com/rappi/fraud/rules'
def jacocoExcludedDirs = [
        "$baseFolder/config/**",
        "$baseFolder/entities/**",
        "$baseFolder/errors/**",
        "$baseFolder/extensions/**",
        "$baseFolder/module/**",
        "$baseFolder/verticle/**",
        "$baseFolder/apm/**"
]

dependencies {

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version

    compile group: 'io.vertx', name: 'vertx-jdbc-client', version: vertx_version
    compile group: 'net.snowflake', name: 'snowflake-jdbc', version: '3.0.0'
    compile group: 'com.zaxxer', name: 'HikariCP', version: '2.3.2'

    compile group: "io.vertx", name: "vertx-core", version: vertx_version
    compile group: "io.vertx", name: "vertx-web", version: vertx_version
    compile group: "io.vertx", name: "vertx-web-client", version: vertx_version
    compile group: "io.vertx", name: "vertx-rx-java2", version: vertx_version
    compile group: "io.vertx", name: "vertx-config", version: vertx_version
    compile group: "io.vertx", name: "vertx-config-yaml", version: vertx_version
    compile group: "io.vertx", name: "vertx-rx-java2", version: vertx_version
    compile group: "io.vertx", name: "vertx-redis-client", version: vertx_version

    compile group: "io.vertx", name: "vertx-mongo-client", version: vertx_version

    compile 'org.kie:kie-spring:7.24.0.Final'

    compile group: "com.google.inject", name: "guice", version: "4.2.0"

    compile group: 'io.reactiverse', name: 'reactive-pg-client', version: '0.11.1'
    compile group: 'io.github.resilience4j', name: 'resilience4j-rxjava2', version: '0.17.0'
    compile group: 'io.github.resilience4j', name: 'resilience4j-ratelimiter', version: '0.17.0'

    compile group: "org.flywaydb", name: "flyway-core", version: "5.2.4"
    compile group: "org.postgresql", name: "postgresql", version: "42.2.4"

    compile group: "ch.qos.logback", name: "logback-classic", version: "1.2.3"
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.9.6'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-modules-java8', version: '2.9.6'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.6'

    compile group: "com.hubrick.vertx", name: "vertx-s3-client", version: "3.3.3"

    compile group: 'com.signalfx.public', name: 'signalfx-codahale', version: '1.0.11'
    compile group: 'com.signalfx.public', name: 'signalfx-java', version: '1.0.11'
    compile group: 'io.opentelemetry', name: 'opentelemetry-api', version: '1.0.1'
    compile group: 'io.opentelemetry', name: 'opentelemetry-extension-annotations', version: '1.0.1'
    implementation group: 'com.signalfx.public', name: 'signalfx-trace-api', version: '0.48.0-sfx6'

    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.4'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.2.3-1'
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'
    compile "io.vertx:vertx-micrometer-metrics:$vertx_version"

    compile "io.micrometer:micrometer-registry-prometheus:$micrometer_version"

    compile group: 'com.zaxxer', name: 'HikariCP', version: '3.4.1'

    compile group: "io.vertx", name: "vertx-micrometer-metrics", version: vertx_version
    compile group: "io.micrometer", name: "micrometer-registry-prometheus", version: '1.4.1'

    testCompile group: "io.vertx", name: "vertx-junit5", version: vertx_version
    testCompile group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.3.2"
    testCompile group: "org.junit.jupiter", name: "junit-jupiter-params", version: "5.3.2"
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.27.0'
    testCompile group: "org.mockito", name: "mockito-inline", version: "3.4.0"
    testCompile group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.6.0'
    testCompile group: 'org.mockito.kotlin', name: 'mockito-kotlin', version: '3.1.0'
    testImplementation "io.mockk:mockk:1.9.3"

    testCompile 'com.jayway.restassured:rest-assured:2.4.0'
    testCompile 'org.assertj:assertj-core:2.0.0'

    implementation project(':rules-interpreter')

    ktlint "com.pinterest:ktlint:0.34.2"

}

test {
    environment "ENV", "test"

    useJUnitPlatform()

    testLogging {
        showStandardStreams = true
        events = ["passed", "skipped", "failed"]
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludedDirs)
        }))
    }
}

shadowJar {
    setArchiveBaseName('fraud-rules-engine')
    setArchiveClassifier('shadow')
    zip64 = true
}

tasks.build.dependsOn tasks.shadowJar

